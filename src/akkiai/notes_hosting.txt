Test code and run on local

1. cd src/akkiai/
2. "uvicorn", "src.akkiai.main2:app", "--host", "0.0.0.0", "--port", "8000", "--reload"
3. uvicorn main2:app --host 0.0.0.0 --port 8000 --reload
4. go to local host since for testing 0.0.0.0:8000 will NOT work so use : http://localhost:8000/docs

EC2 Instance connect and run the codes

1. Build a docker image docker build -t akkiai_v1-image .
2. Run the docker image in a container docker run -d (detached mode) -p 8000:8000 akkiai_v1-image 
3. to re run and check other dockers use docker ps 
4. remove some docker container using docker rm <container  id>
AWS-Linux terminal (STEP 1-6 for the first time)
1. sudo yum update -y 
2. sudo amazon-linux-extras install docker
3. sudo service docker start
4. sudo usermod -a -G docker ec2-user (modifying user permission for ec2 instance)
5.pwd
6. mkdir downloads
7. cd downloads 

When pushing dockerfile change the relative paths 

Upload the local files to the ec2 instances (using pem file)
1.Run the following command in your local terminal (VsCode Git Bash)
2.chmod 600 akkiai_v1_kp.pem
3.scp -i akkiai_v1_kp.pem Dockerfile main2.py crew.py (all local relevangt files) ec2-user@16.170.251.94:/home/ec2-user/downloads <path so use pwd and get > (Public IP after @)
4.Now build the docker image in the AWS-Linux terminal with commands
5. sudo docker build -t image_name .


{
  "BUSINESS_DETAILS": "Akki AI is a Multi-Agent AI CoPilot for Founders and Investors. This helps founders to get quick and accurate feedback on different aspects of their startup pitch, strategy, and operations. On the other hand, it helps Investor analysts the ability to evaluate and analyse 1000s of idea pitch / applications, identifying the potential unicorn saving them time, and cost.",
  "PRODUCT_DESCRIPTION": "Akki AI gives a web and app platform with a chat like interface to its users with an ability to give their inputs, queries and select the list of personalized-AI agents to help them with deep-analysis and output. Akki AI also intends to come with API/SDK/Plugins on existing platforms."
}Test code and run on local

1. cd src/akkiai/
2. "uvicorn", "src.akkiai.main2:app", "--host", "0.0.0.0", "--port", "8000", "--reload"
3. uvicorn main2:app --host 0.0.0.0 --port 8000 --reload
4. go to local host since for testing 0.0.0.0:8000 will NOT work so use : http://localhost:8000/docs

EC2 Instance connect and run the codes

1. Build a docker image docker build -t akkiai_v1-image .
2. Run the docker image in a container docker run -d (detached mode) -p 8000:8000 akkiai_v1-image 
3. to re run and check other dockers use docker ps 
4. remove some docker container using docker rm <container  id>
AWS-Linux terminal (STEP 1-6 for the first time)
1. sudo yum update -y 
2. sudo amazon-linux-extras install docker
3. sudo service docker start
4. sudo usermod -a -G docker ec2-user (modifying user permission for ec2 instance)
5.pwd
6. mkdir downloads
7. cd downloads 

When pushing dockerfile change the relative paths 

Upload the local files to the ec2 instances (using pem file)
1.Run the following command in your local terminal (VsCode Git Bash)
2.chmod 600 akkiai_v1_kp.pem
3.scp -i akkiai_v1_kp.pem Dockerfile main2.py crew.py (all local relevangt files) ec2-user@16.170.251.94:/home/ec2-user/downloads <path so use pwd and get > (Public IP after @)
4.Now build the docker image in the AWS-Linux terminal with commands
5. sudo docker build -t image_name .


{
  "BUSINESS_DETAILS": "Akki AI is a Multi-Agent AI CoPilot for Founders and Investors. This helps founders to get quick and accurate feedback on different aspects of their startup pitch, strategy, and operations. On the other hand, it helps Investor analysts the ability to evaluate and analyse 1000s of idea pitch / applications, identifying the potential unicorn saving them time, and cost.",
  "PRODUCT_DESCRIPTION": "Akki AI gives a web and app platform with a chat like interface to its users with an ability to give their inputs, queries and select the list of personalized-AI agents to help them with deep-analysis and output. Akki AI also intends to come with API/SDK/Plugins on existing platforms."
}


1. Create branches main and <sub-branches> 
2. Passing kickoff id for human input for real time conversation (API, )
3. Supabase integrate do not create local copy of supabase. Create project id and url and iteract with the database 
4. Create database with supabase with a kickoff id.
5. job_id 
6. 2 tables table 1 ID auto generated by supabase kickoff id from crew  3rd would be status of that job, created date and updated date.
7. Status of the job 
8. Table 2 "task table" for every kickoff id we have a comb (task id, task1, task1) input output of each task.
9. Inputs fields are for human inputs only. That will be used for 
10. Keep status of task. 

kickoff---5 tasks---(combination of kickoff, task_id, input, output)

Python supabase integration Supabase project.
Each project URL and API Key.


Supabase Integration with EC2 Instance

1. URL https://rqgwnmknmivdgfzbclzh.supabase.co
2. anon : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJxZ3dubWtubWl2ZGdmemJjbHpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM0MTk3NDksImV4cCI6MjA0ODk5NTc0OX0.vKTEKLPZcGrdlMgkS55a4cSnDxx8bdSupi0VkSkQRD4
3. service role: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJxZ3dubWtubWl2ZGdmemJjbHpoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMzQxOTc0OSwiZXhwIjoyMDQ4OTk1NzQ5fQ.3S82fepFGeelGt_oTwYAu8IONsjuCf-Zft78UyakgEo 

MoM (6 Dec 24)

1. Read docs, can we pass kickoff_id to run? associating it with the crew and i/o
2. Intermediate tasks output
3. Parallel crew execution 
4. Can we get crew enterprise features in our system? 
5. Get kickoff_id and fields that are available in crew ai enterprise.
 