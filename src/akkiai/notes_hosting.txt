Test code and run on local

1. cd src/akkiai/
2. "uvicorn", "src.akkiai.main2:app", "--host", "0.0.0.0", "--port", "8000", "--reload"
3. uvicorn main2:app --host 0.0.0.0 --port 8000 --reload
4. go to local host since for testing 0.0.0.0:8000 will NOT work so use : http://localhost:8000/docs

EC2 Instance connect and run the codes (https://youtu.be/qNIniDftAcU?si=GbBcpq2xFpFZETPe)

1. Build a docker image docker build -t akkiai_v1-image .
2. Run the docker image in a container docker run -d (detached mode) -p 8000:8000 akkiai_v1-image 
3. to re run and check other dockers use docker ps 
4. remove some docker container using docker rm <container  id>
AWS-Linux terminal (STEP 1-6 for the first time)
1. sudo yum update -y 
2. sudo amazon-linux-extras install docker
3. sudo service docker start
4. sudo usermod -a -G docker ec2-user (modifying user permission for ec2 instance)
5.pwd
6. mkdir downloads
7. cd downloads 

When pushing dockerfile change the relative paths 

Upload the local files to the ec2 instances (using pem file)
1.Run the following command in your local terminal (VsCode Git Bash)
2.chmod 600 akkiai_v1_kp.pem
3.scp -i akkiai_v1_kp.pem Dockerfile main2.py crew.py (all local relevangt files) ec2-user@16.170.251.94:/home/ec2-user/downloads <path so use pwd and get > (Public IP after @)
4.Now build the docker image in the AWS-Linux terminal with commands
5. sudo docker build -t image_name .


{
  "BUSINESS_DETAILS": "Akki AI is a Multi-Agent AI CoPilot for Founders and Investors. This helps founders to get quick and accurate feedback on different aspects of their startup pitch, strategy, and operations. On the other hand, it helps Investor analysts the ability to evaluate and analyse 1000s of idea pitch / applications, identifying the potential unicorn saving them time, and cost.",
  "PRODUCT_DESCRIPTION": "Akki AI gives a web and app platform with a chat like interface to its users with an ability to give their inputs, queries and select the list of personalized-AI agents to help them with deep-analysis and output. Akki AI also intends to come with API/SDK/Plugins on existing platforms."
}Test code and run on local

1. cd src/akkiai/
2. "uvicorn", "src.akkiai.main2:app", "--host", "0.0.0.0", "--port", "8000", "--reload"
3. uvicorn main2:app --host 0.0.0.0 --port 8000 --reload
4. go to local host since for testing 0.0.0.0:8000 will NOT work so use : http://localhost:8000/docs

EC2 Instance connect and run the codes

1. Build a docker image docker build -t akkiai_v1-image .
2. Run the docker image in a container docker run -d (detached mode) -p 8000:8000 akkiai_v1-image 
3. to re run and check other dockers use docker ps 
4. remove some docker container using docker rm <container  id>
AWS-Linux terminal (STEP 1-6 for the first time)
1. sudo yum update -y 
2. sudo amazon-linux-extras install docker
3. sudo service docker start
4. sudo usermod -a -G docker ec2-user (modifying user permission for ec2 instance)
5.pwd
6. mkdir downloads
7. cd downloads 

When pushing dockerfile change the relative paths 

Upload the local files to the ec2 instances (using pem file)
1.Run the following command in your local terminal (VsCode Git Bash)
2.chmod 600 akkiai_v1_kp.pem
3.scp -i akkiai_v1_kp.pem Dockerfile main2.py crew.py (all local relevangt files) ec2-user@16.170.251.94:/home/ec2-user/downloads <path so use pwd and get > (Public IP after @)
4.Now build the docker image in the AWS-Linux terminal with commands
5. sudo docker build -t image_name .
5. run docker with environment variables "docker run -d -p 8000:8000 --env-file /path/to/.env akkiai-image2"
6. Update security group of your ec2 instance to allow gtraffic from port 8000



{
  "BUSINESS_DETAILS": "Akki AI is a Multi-Agent AI CoPilot for Founders and Investors. This helps founders to get quick and accurate feedback on different aspects of their startup pitch, strategy, and operations. On the other hand, it helps Investor analysts the ability to evaluate and analyse 1000s of idea pitch / applications, identifying the potential unicorn saving them time, and cost.",
  "PRODUCT_DESCRIPTION": "Akki AI gives a web and app platform with a chat like interface to its users with an ability to give their inputs, queries and select the list of personalized-AI agents to help them with deep-analysis and output. Akki AI also intends to come with API/SDK/Plugins on existing platforms."
}


MoM 21st 

1. Kickoff_id should  be shown immediately 
2. Agent def agent_name shoudl be same as the agent name defined in the agents.yaml config
3. Create 4 crews basically 4 different crew classes 
4. We need to normalise agent names 
5. taking inputs--- take inputs based on each crew (no need to take N number of inputs only inputs relevant to 
the crew)

MoM 22nd 

1. New set of prompts and agents for new flows 
2. One thing to do is when we are running crew, the crew is submit a job to anthropic using our api (Crew code how they 
are calling anthropic api)
3. What is the job id from crew? It is given by anthropic api when crew calls it --- find it out 
4. How crew and anthropic call interact each other? (We will just be keeping that job id)
5. Taking human inputs in between crew runs how to do that? make endpoint ffrom the github function for human input  






task1 exp output
Present your output in the following JSON format along with respective headings and the details about
    description given below each audience segment 1. Top 3 specific characteristics of the Target Group 
    2. Reasons summary why this segment is a good fit:
    <target_audience_list>
    <Primary_TG1>
    1. Primary Audiences Target Group 1
      - Top 3 specific characteristics of the Primary Audiences Target Group 1
      - Reasons summary why this segment is a good fit
    </Primary_TG1>

    <Primary_TG2>
    2. Primary Audiences Target Group 2
      - Top 3 specific characteristics of the Primary Audiences Target Group 2
      - Reasons summary why this segment is a good fit
    </Primary_TG2>

    <Primary_TG3>
    2. Primary Audiences Target Group 3
      - Top 3 specific characteristics of the Primary Audiences Target Group 3
      - Reasons summary why this segment is a good fit
    </Primary_TG3>

    [Continue with additional primary segments as needed]

    <Secondary_TG1>
    Secondary Audiences Target Group 1: 
      - Top 3 specific characteristics of the Secondary Audiences Target Group 1
      - Reasons why this segment is relevant
    </Secondary_TG1>

    <Secondary_TG2>
    Secondary Audiences Target Group 2: 
      - Top 3 specific characteristics of the Secondary Audiences Target Group 2
      - Reasons why this segment is relevant
    </Secondary_TG2>

    <Secondary_TG3>
    Secondary Audiences Target Group 3: 
      - Top 3 specific characteristics of the Secondary Audiences Target Group 3
      - Reasons why this segment is relevant
    </Secondary_TG3>

    [Continue with additional secondary segments as needed]
    </target_audience_list>